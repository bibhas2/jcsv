/*
 * This source file was generated by the Gradle 'init' task
 */
package org.mobiarch.jcsv;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    public static void print(ByteBuffer buff) {
        if (buff == null) {
            System.out.println("null");

            return;
        }

        //Dump bytes
        for (int i = 0; i < buff.limit(); ++i) {
            System.out.write((int) buff.get(i));
        }
    }

    @Test 
    public void basicUsage() {
        var str =
            "aa,bb,\"AA, BB\"  ,dd\r\n" +
            "ee,ff,gg,hh,ii,jj\r\n";
        var data = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));
        int[] line = {0};
        Parser p = new Parser();
        
        p.parse(data, 10, record -> {
            line[0] = record.lineIndex();

            if (record.lineIndex() == 0) {
                assertEquals(record.field(2).limit(), 6);
            } else if (record.lineIndex() == 1) {
                assertEquals(record.numFields(), 6);
            } else {
                fail("Invalid row index");
            }
        });

        assertEquals(1, line[0]);
    }

    @Test
    public void mapTest() throws Exception {
        Parser p = new Parser();
        int[] line = {0};

        p.parse("test-data/medals.csv", 10, record -> {
            assertEquals(4, record.numFields());

            for (int i = 0; i < record.numFields(); ++i) {
                System.out.print("[");
                print(record.field(i));
                System.out.print("]"); 

                //Check field lengths
                assertEquals(i == 0 ? 3 : 2, record.field(i).limit());
            }
            System.out.println();
            
            line[0] = record.lineIndex();
        });

        assertEquals(4, line[0]);
    }

    @Test
    public void parseIntTest() throws Exception {
        Parser p = new Parser();
        int[] medalTotal = {0, 0, 0};

        p.parse("test-data/medals.csv", 10, record -> {
            medalTotal[0] += record.intField(1);
            medalTotal[1] += record.intField(2);
            medalTotal[2] += record.intField(3);
        });

        int[] expectedMedalTotal = {108, 114, 113};

        assertArrayEquals(expectedMedalTotal, medalTotal);
    }

    @Test
    public void parseDoubleTest() throws Exception {
        Parser p = new Parser();
        double[] total = {0.0};

        p.parse("test-data/products.csv", 10, record -> {
            if (record.lineIndex() == 0) {
                //Skip the header row
                return; 
            }

            double unitPrice = record.doubleField(1);
            int quantity = record.intField(2);

            total[0] += unitPrice * quantity;
        });

        assertEquals(586.58, total[0], 0.001);
    }

    @Test
    public void comparisonTest() throws Exception {
        Parser p = new Parser();
        var map = new HashMap<ByteBuffer, Double>();

        p.parse("test-data/products.csv", 10, record -> {
            if (record.lineIndex() == 0) {
                //Skip the header row
                return; 
            }

            ByteBuffer productId = record.field(0);
            double price = record.doubleField(1);
            int quantity = record.intField(2);

            map.put(productId, price * quantity);
        });

        var key = ByteBuffer.wrap(
            "K192".getBytes(StandardCharsets.UTF_8));

        assertEquals(131.45, map.get(key), 0.001);
    }
}
